#include "Tokenizer.h"
#include <iostream>
#include <cctype>
#include <string>
#include <vector>

namespace Scanner
{
	class ConsumeState
	{
	public:
		ConsumeState();
		ConsumeState(const ConsumeState&) = delete;
		ConsumeState& operator=(const ConsumeState&) = delete;
		virtual ~ConsumeState();
		void attach(std::istream* pIn) { _pIn = pIn; }
		virtual void eatChars() = 0;
		void consumeChars() {
			_pState->eatChars();
			_pState = nextState();
		}
		bool canRead() { return _pIn->good(); }
		std::string getTok() { return token; }
		bool hasTok() { return token.size() > 0; }
		ConsumeState* nextState();
		bool setSpecialSingleChars(std::string ssc);
		bool setSpecialCharPairs(std::string scp);
		bool doReturnComments(bool statComments);
	protected:
		static std::string token;
		static std::istream* _pIn;
		static int prevChar;
		static int currChar;
		static ConsumeState* _pState;
		static ConsumeState* _pEatCppComment;
		static ConsumeState* _pEatCComment;
		static ConsumeState* _pEatWhitespace;
		static ConsumeState* _pEatPunctuator;
		static ConsumeState* _pEatAlphanum;
		static ConsumeState* _pEatNewline;
		static ConsumeState* _pEatQuotedString;
		static ConsumeState* _pEatSpecialDoubleChar;
		static ConsumeState* _pEatSpecialSingleChar;
		std::vector<std::string> specialSingleChars { "<", ">","[","]", "(",")","{" , "}", ":", "=", "+", "-", "*", "\n" };
		std::vector<std::string> specialDoubleChars{ "<<" , ">>" , "::", "++", "--", "==" , "+=", "-=", "*=", "/=" };
		bool statComments = false;
	};
}

using namespace Scanner;

std::string ConsumeState::token;
std::istream* ConsumeState::_pIn = nullptr;
int ConsumeState::prevChar;
int ConsumeState::currChar;
ConsumeState* ConsumeState::_pState = nullptr;
ConsumeState* ConsumeState::_pEatCppComment = nullptr;
ConsumeState* ConsumeState::_pEatCComment = nullptr;
ConsumeState* ConsumeState::_pEatWhitespace = nullptr;
ConsumeState* ConsumeState::_pEatPunctuator = nullptr;
ConsumeState* ConsumeState::_pEatAlphanum = nullptr;
ConsumeState* ConsumeState::_pEatNewline;
ConsumeState* ConsumeState::_pEatQuotedString = nullptr;
ConsumeState* ConsumeState::_pEatSpecialDoubleChar = nullptr;
ConsumeState* ConsumeState::_pEatSpecialSingleChar = nullptr;


void testLog(const std::string& msg);

bool ConsumeState::setSpecialSingleChars(std::string ssc)
{
	specialSingleChars.push_back(ssc);
	return true;
}
bool ConsumeState::setSpecialCharPairs(std::string scp)
{
	specialDoubleChars.push_back(scp);
	return true;
}
bool ConsumeState::doReturnComments(bool statCom)
{
	statComments = statCom;
	return false;
}
ConsumeState* ConsumeState::nextState()
{
	if (!(_pIn->good()))
		return nullptr;
	int chNext = _pIn->peek();
	if (chNext == EOF)
		_pIn->clear();
	if (std::isspace(currChar) && currChar != '\n')
	{
		testLog("state: eatWhitespace");
		return _pEatWhitespace;
	}
	if (currChar == '/' && chNext == '/')
	{
		testLog("state: eatCppComment");
		return _pEatCppComment;
	}
	if (currChar == '/' && chNext == '*')
	{
		testLog("state: eatCComment");
		return _pEatCComment;
	}
	if (currChar == '\n')
	{
		testLog("state: eatNewLine");
		return _pEatNewline;
	}
	if (std::isalnum(currChar))
	{
		testLog("state: eatAlphanum");
		return _pEatAlphanum;
	}
	if (currChar == '"')
	{
		testLog("state: eatQuotedString");
		return _pEatQuotedString;
	}
	std::string currStr; 
	currStr.push_back(currChar); 
	std::string stNext; 
	stNext.push_back(chNext);
	if (std::find (specialDoubleChars.begin(),specialDoubleChars.end(),currStr+stNext) != specialDoubleChars.end())
	{
		testLog("state: eatSpecialDoubleChar");
		return _pEatSpecialDoubleChar;
	}
	if (std::find (specialSingleChars.begin(), specialSingleChars.end(),currStr) != specialSingleChars.end())
	{
		testLog("state: eatSpecialSingleChar");
		return _pEatSpecialSingleChar;
	}
	if (ispunct(currChar))
	{
		testLog("state: eatPunctuator");
		return _pEatPunctuator;
	}
	if (!_pIn->good())
		return _pEatWhitespace;
	throw(std::logic_error("invalid type"));
}

class EatWhitespace : public ConsumeState
{
public:
	virtual void eatChars()
	{
		token.clear();
		//std::cout << "\n  eating whitespace";
		do {
			if (!_pIn->good())  // end of stream
				return;
			currChar = _pIn->get();
		} while (std::isspace(currChar) && currChar != '\n');
	}
};

class EatCppComment : public ConsumeState
{
public:
	virtual void eatChars()
	{
		token.clear();
		do {
			if (!_pIn->good())  // end of stream
				return;		
			token += currChar;
			currChar = _pIn->get();
		} while (currChar != '\n');
		if (statComments == false)
			token.clear();
	}
};

class EatCComment : public ConsumeState
{
public:
	virtual void eatChars()
	{
		token.clear();
		do {
			if (!_pIn->good())  // end of stream
				return;
			token += currChar;
			currChar = _pIn->get();
		} while (currChar != '*' || _pIn->peek() != '/');
			token += currChar;
			token += _pIn->get();
		currChar = _pIn->get();	
		if (statComments == false)
			token.clear();
	}
};

class EatPunctuator : public ConsumeState
{
public:
	virtual void eatChars()
	{
		token.clear();
		//std::cout << "\n  eating punctuator";
		do {
			token += currChar;
			if (!_pIn->good())  // end of stream
				return;
			currChar = _pIn->get();
		} while (ispunct(currChar));
	}
};

class EatAlphanum : public ConsumeState
{
public:
	virtual void eatChars()
	{
		token.clear();
		//std::cout << "\n  eating alphanum";
		do {
			token += currChar;
			if (!_pIn->good())  // end of stream
				return;
			currChar = _pIn->get();
		} while (isalnum(currChar));
	}
};

class EatSpecialDoubleCharacters : public ConsumeState
{
public:
	virtual void eatChars()
	{
		token.clear();
		//std::cout << "\n  eating special double chars";
		if (!_pIn->good())  // end of stream
			return;
			token += currChar;	
			token += _pIn->peek();
			currChar = _pIn->get();
			currChar = _pIn->get();
	}
};

class EatSpecialSingleCharacters : public ConsumeState
{
public:
	virtual void eatChars()
	{
		token.clear();
		//std::cout << "\n  eating special single chars";
		if (!_pIn->good())  // end of stream
			return;
		token += currChar;
		currChar = _pIn->get();
	}
};

class EatNewline : public ConsumeState
{
public:
	virtual void eatChars()
	{
		token.clear();
		token += currChar;
		if (!_pIn->good())  // end of stream
			return;
		currChar = _pIn->get();
	}
};

class EatQuotedString : public ConsumeState
{
public:
	virtual void eatChars()
	{
		token.clear();
		int escapeCharOn = 0; //initial : 0 true : 1 false :2
		//std::cout << "\n  eating Quoted String";
		do {
			if (escapeCharOn == 1)
			{
				token += currChar;
				escapeCharOn = 2;
				currChar = _pIn->get();
				if (!_pIn->good())  // end of stream
					return;
			}
			else
			{
				if (!_pIn->good())  // end of stream
					return;
				if(escapeCharOn != 0)
				token += currChar;
				escapeCharOn = 2;
				currChar = _pIn->get();
				std::string combChar;
				combChar += currChar;
				combChar += _pIn->peek();
				if (combChar == "\\\"" || combChar == "\\\'")
				{
					currChar = _pIn->get();
					escapeCharOn = 1;
				}
			}		
		} while (currChar != '"'||escapeCharOn == 1);
		_pIn->get();
		currChar = _pIn->get();
	}
};

ConsumeState::ConsumeState()
{
	static bool first = true;
	if (first)
	{
		first = false;
		_pEatAlphanum = new EatAlphanum();
		_pEatCComment = new EatCComment();
		_pEatCppComment = new EatCppComment();
		_pEatPunctuator = new EatPunctuator();
		_pEatWhitespace = new EatWhitespace();
		_pEatNewline = new EatNewline();
		_pEatQuotedString = new EatQuotedString();
		_pEatSpecialDoubleChar = new EatSpecialDoubleCharacters();
		_pEatSpecialSingleChar = new EatSpecialSingleCharacters();
		_pState = _pEatWhitespace;
	}
}


ConsumeState::~ConsumeState()
{
	static bool first = true;
	if (first)
	{
		first = false;
		delete _pEatAlphanum;
		delete _pEatCComment;
		delete _pEatCppComment;
		delete _pEatPunctuator;
		delete _pEatWhitespace;
		delete _pEatQuotedString;
		delete _pEatNewline;
		delete _pEatSpecialDoubleChar;
		delete _pEatSpecialSingleChar;
	}
}

Toker::Toker() : pConsumer(new EatWhitespace()) {}

Toker::~Toker() { delete pConsumer; }

bool Toker::returnComments(bool doReturnComments)
{
	return pConsumer->doReturnComments(doReturnComments);
}
bool Toker::attach(std::istream* pIn)
{
	if (pIn != nullptr && pIn->good())
	{
		pConsumer->attach(pIn);
		return true;
	}
	return false;
}

std::string Toker::getTok()
{
	while (true)
	{
		if (!pConsumer->canRead())
			return "";
		pConsumer->consumeChars();
		if (pConsumer->hasTok())
			break;
	}
	return pConsumer->getTok();
}

bool Toker::canRead() { return pConsumer->canRead(); }
bool Toker::setSpecialSingleCharsTok(std::string ssc)
{
	return pConsumer->setSpecialSingleChars(ssc); 
}
bool Toker::setSpecialCharPairsTok(std::string scp)
{
	return pConsumer->setSpecialCharPairs(scp);
}
void testLog(const std::string& msg)
{
#ifdef TEST_LOG
	std::cout << "\n  " << msg;
#endif
}

//----< test stub >--------------------------------------------------

#ifdef TEST_TOKENIZER

#include <fstream>

int main()
{
	//std::string fileSpec = "../Tokenizer/Tokenizer.cpp";
	//std::string fileSpec = "../Tokenizer/Tokenizer.h";
	std::string fileSpec = "../Tokenizer/Test.txt";

	std::ifstream in(fileSpec);
	if (!in.good())
	{
		std::cout << "\n  can't open " << fileSpec << "\n\n";
		return 1;
	}
	Toker toker;
	
	toker.attach(&in);
	do
	{
		std::string tok = toker.getTok();
		if (tok == "\n")
			tok = "newline";
		std::cout << "\n -- " << tok;
	} while (in.good());

	std::cout << "\n\n";
	std::getchar(); //Remove
	return 0;
}
#endif
